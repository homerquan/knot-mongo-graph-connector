#!/usr/bin/env node

'use strict';

var repl = require('repl');
var optimist = require('optimist');
var util = require('util');
var vm = require('vm');
var Gremlin = require('../lib/gremlin');
var _ = require('underscore');

var argv = optimist.alias('c', 'classpath').argv;
argv.classpath = argv.classpath || '.';

var gremlin = new Gremlin({
  classpath: util.isArray(argv.classpath) ? argv.classpath : [ argv.classpath ]
});

// inject a default graph
var TinkerGraphFactory = gremlin.java.import('com.tinkerpop.blueprints.impls.tg.TinkerGraphFactory');
var graph = TinkerGraphFactory.createTinkerGraphSync();
var g = gremlin.wrap(graph);

console.log();
console.log('         \\,,,/');
console.log('         (o o)');
console.log('-----oOOo-(_)-oOOo-----');

var r = repl.start({
  prompt: 'gremlin> ',
  input: process.stdin,
  output: process.stdout,
  terminal: true,
  ignoreUndefined: true,
  writer: outFunc,
  eval: evalFunc
});

function outFunc(it) {
  if (_.isObject(it) && _.isFunction(it.toJSONSync)) {
    it = it.toJSONSync();
  }
  return '==> ' + util.inspect(it);
}

function evalFunc(code, context, file, cb) {
  // g.print is a helper method for async functions.
  // in the case that it is used, we must defer calling
  // the callback until print itself has been called
  var async = false;
  var print = function (err, data) {
    cb(null, gremlin.toJSONSync(data));
  };

  Object.defineProperty(g, 'print', {
    get: function () {
      async = true;
      return print;
    },
    configurable: true
  });

  try {
    var result = vm.runInContext(code, context, file);
    if (!async) {
      cb(null, result);
    }
  } catch (e) {
    return cb(e);
  }
};

r.context.gremlin = gremlin;
r.context.T = gremlin.Tokens;
r.context.java = gremlin.java;
r.context.TinkerGraphFactory = TinkerGraphFactory;
r.context.graph = graph;
r.context.g = g;

r.on('exit', function () {
  console.log('Good-bye from Gremlin!');
  process.exit();
});
