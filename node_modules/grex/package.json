{
  "name": "grex",
  "description": "Client for Rexster Graph Server",
  "version": "0.7.2",
  "keywords": [
    "database",
    "graph",
    "tinkerpop",
    "rexster",
    "gremlin",
    "blueprints"
  ],
  "homepage": "https://github.com/gulthor/grex",
  "author": "",
  "contributors": [
    {
      "name": "Andreas Richter"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/gulthor/grex.git"
  },
  "bugs": {
    "url": "https://github.com/gulthor/grex/issues"
  },
  "dependencies": {
    "gremlin-script": "^1.0.2",
    "inherits": "~2.0.1",
    "lodash": "~2.4.1",
    "request": "^2.49.0"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.6.0"
  },
  "main": "./index.js",
  "devDependencies": {
    "gulp": "^3.6.0",
    "gulp-browserify": "~0.5.0",
    "gulp-bump": "^0.1.8",
    "gulp-jshint": "^1.9.0",
    "gulp-mocha": "^2.0.0",
    "gulp-rename": "~1.2.0",
    "gulp-size": "^1.1.0",
    "gulp-uglify": "^1.0.1",
    "should": "^4.3.0"
  },
  "readme": "Grex\n====\n\nA JavaScript [TinkerPop Rexster 2.x+](https://github.com/tinkerpop/rexster/wiki) client for Node.js and the browsern.\n\ngRex helps you send [Gremlin](https://github.com/tinkerpop/gremlin/wiki) queries to Rexster via HTTP. It supports [script engine bindings](https://github.com/tinkerpop/rexster/wiki/Gremlin-Extension#script-engine-bindings), [server-side scripts](https://github.com/tinkerpop/rexster/wiki/Gremlin-Extension#load-parameter) and [type system](https://github.com/tinkerpop/rexster/wiki/Property-Data-Types).\n\nIf you need help understanding the Gremlin API, you'll find [GremlinDocs](http://gremlindocs.com/), [SQL2Gremlin](http://sql2gremlin.com) and upcoming [TinkerPop3 documentation](http://www.tinkerpop.com/docs/current/) to be useful resources. The official [Gremlin users mailing list](https://groups.google.com/forum/#!forum/gremlin-users) is also a very valuable source of information.\n\nFeel free to [open issues](https://github.com/gulthor/grex/issues) if you have trouble using the library (bugs, feature requests). Questions should be posted on [StackOverflow](http://stackoverflow.com/) with the `javascript` and `gremlin` tags.\n\n## Contributing\n\nThe [master branch](https://github.com/gulthor/grex/tree/master) is a stable, release-only branch. Please check out the [develop branch](https://github.com/gulthor/grex/tree/develop) for the latest changes. Pull requests are welcome and should be sent against [develop](https://github.com/gulthor/grex/tree/develop).\n* In case of bug fixes, please provide your pull requests with two commits: the first one with tests that show the problem being fixed (so I can checkout to it and see what's wrong), and the last one with the actual fix.\n* If you wish to send a pull request with a new feature, please open an issue first so we can discuss about it.\n\n## Testing\n\ngRex is being developed with rexster-server-2.5.0. We use a slightly modified rexster.xml file located in `conf/`. Please follow the following steps to setup your test environment:\n```\ncd /path/to/rexster-server-2.5.0\nln -s /path/to/grex/conf/rexster-2.5.0.xml config/rexster-2.5.0-grex.xml\nln -s /path/to/grex/scripts scripts\nbin/rexster.sh -s -c conf/rexster-2.5.0-grex.xml\n```\nThis will start Rexster 2.5.0 with gRex test scripts folder loaded (required by tests).\n\nThen run tests:\n```\ncd /path/to/grex\nnpm install\ngulp test\n```\n\n## Installation\n\ngRex works in Node.js and the browser.\n\n```\n$ npm install grex --save\n```\n\n## Quick start\n\nGrex does three things:\n* creates an HTTP client\n* helps you generate a Gremlin queries (Groovy flavored)\n* sends the query with any bound parameters for execution, retrieving the results (if any).\n\n```javascript\nvar grex = require('grex');\nvar client = grex.createClient();\n// Init a couple shortcuts\nvar gremlin = grex.gremlin;\nvar g = grex.g;\n\n// 1. Initialize a Gremlin object to work with\nvar query = gremlin(g.v(1)); // query.script === 'g.v(1)'\n\n// 2. Send script for execution, and return a raw response object with a 'results' Array property.\nclient.execute(query, function(err, response) {\n  // ...\n})\n```\n\nShorter version (with dynamic query creation):\n\n```javascript\nclient.execute(g.v(1)).done(function(response) {\n  // ...\n});\n```\n\n## Documentation\n\nA distinct `GremlinScript` object is created internally every time you call `grex.gremlin()`. Each `GremlinScript` instance is independant from the others and [will be executed in a transaction](https://github.com/tinkerpop/rexster/wiki/Extension-Points#extensions-and-transactions), providing the exposed graph database you're using supports them.\n\nIn order to get an API closer to Groovy-flavored Gremlin, it is recommended that you add the following shortcuts on top of your JavaScript files:\n\n```javascript\nvar g = grex.g; // Graph getter\nvar _ = grex._; // Pipeline getter. Beware of not conflicts and make sure you don't override libraries such as Underscore.js or Lodash.js\n```\nBe aware though that bound parameters are not yet supported when using the object wrappers. You should use the `printf` style for better performance and security (this will be discussed later in the documentation).\n\n### Building a Gremlin script\n\n```javascript\nvar query = gremlin(g.V('name', 'marko').out());\n// query.script === \"g.V('name','marko').out\"\n```\n\n#### Building a multiline Gremlin script\n\nCreating a `GremlinScript` with multiple statements is done by calling `query()` multiple times:\n\n```javascript\n// JavaScript\nvar query = gremlin();\nquery(g.addVertex({ name: \"Alice\" }));\nquery(g.addVertex({ name: \"Bob\" }));\nquery(g.addVertex({ name: \"Carol\" }));\nquery(g.addVertex({ name: \"Dave\" }));\n```\n\nThis will generate the following Groovy code, stored as a string in `query.script`:\n\n```groovy\n// Groovy\ng.addVertex([\"name\": \"Alice\"])\ng.addVertex([\"name\": \"Bob\"])\ng.addVertex([\"name\": \"Carol\"])\ng.addVertex([\"name\": \"Dave\"])\n```\nNote that spaces are actually ommitted in the generated string. This documentation will display them in the following examples for clarity.\n\n#### Building a multiline Gremlin script with JavaScript variables\n\nThe following is especially useful with transactions, for example when simultaneously creating vertices and edges.\n\nGrex `query` function object returned by `grex.gremlin()` has a special `.var(statement[, identifier])` method which helps you identify a statement and store it in a variable.\n\n```javascript\n// JavaScript\nvar query = gremlin();\nvar bob = query.var(g.addVertex({ name: 'Bob' }));\nvar alice = query.var(g.addVertex({ name: 'Alice' }));\nquery(g.addEdge(bob, alice, 'likes', { since: 'now' }));\n```\n\nThe above code will generate this Groovy script:\n```groovy\n// Groovy\ni0 = g.addVertex([\"name\": \"Bob\"])\ni1 = g.addVertex([\"name\": \"Alice\"])\ng.addEdge(i0, i1, \"likes\", [\"since\":\"now\"])\n```\n\nThe Rexster Gremlin extension will execute the provided script in a transaction (see [Rexster Wiki on extensions and transactions](https://github.com/tinkerpop/rexster/wiki/Extension-Points#extensions-and-transactions)).\n\nThis API is required because JavaScript unfortunately lacks reflection on variable names.\n\nAlthough identifiers are automatically assigned within the context of a script, you can add a second optional parameters to `query.var()` and pass an arbitrary string to use as the identifier:\n\n```javascript\n// JavaScript\nvar query = gremlin();\nvar bob = query.var(g.addVertex({ name: 'Bob' }), 'v1');\n```\nWill generate:\n```groovy\n// Groovy\nv1 = g.addVertex([\"name\": \"Bob\"])\n```\n\n#### Building a Gremlin script with string formatting and bound parameters\n\nGrex supports binding parameters when used with formatted strings. It internally uses [Node.js util.format](http://nodejs.org/api/util.html#util_util_format_format).\n\n```javascript\nvar query = gremlin();\nquery('g.v(%s)', 1);\n// query.script === \"g.v(p0)\"\n// query.params === { p0: 1 }\n```\n\nThis will generate the following Gremlin script, with a `gremlin.params = { p0: 1 }` params map attached and sent to Rexster:\n```groovy\n// Groovy\ng.v(p0)\n```\n\nYou can naturally pass multiple parameters:\n\n```javascript\nvar query = gremlin();\nquery(\"g.addVertex('name', %s, 'age', %s)\", \"Bob\", 26);\n// query.script === \"g.addVertex('name', p0, 'age', p1)\"\n// query.params.p0 === 'Bob'\n// query.params.p1 === '26'\n```\n\nNote that it is currently not possible to change the bound parameter naming mechanism, which defaults to `p` followed by an automatically incremented integer.\n\n**IMPORTANT:** gRex helpers/wrapper classes currently do NOT send your script parameters as bound parameters to Rexster. You are currently vulnerable to Gremlin-\"SQL-like\"-injection if you use the helpers. For increased security, please use the string format API described in this sub-section only.\n\nFor example, the following is currently unsafe if you don't trust your data source. Make sure you sanitize your input.\n\n```javascript\n// JavaScript\nvar query = gremlin(g.V('name', req.body.name));\nclient.execute(query, function(err, result) {\n  //...\n});\n```\n\n#### Multiline scripts combining Grex helpers and direct string formatting\n\nYou can combine both style in multiline scripts:\n\n```javascript\n// JavaScript\nvar query = gremlin();\nquery('g.addVertex(\"name\", %s)', 'Alice');\nquery(g.addVertex('name', 'Bob'))\n// query.script === \"g.addVertex('name', p0)\\ng.addVertex('name','bob')\\n\"\n// query.params.p0 === 'Alice'\n```\n\n### Executing a Gremlin script\n\n#### Executing\n\nA Gremlin script will be sent to Rexster for execution when you call the `client.execute()` method.\n\nThe previous example can thus be executed the following way:\n\n```javascript\nclient.execute(query, function(err, response) {\n  if(err) {\n    console.error(err);\n  }\n  console.log(response.results);\n});\n```\n\nExecuting a one line script is trivial:\n\n```javascript\nclient.execute(gremlin(g.v(1)), function (e, response) { console.log(response) });\n```\n\n##### Lazy query creation for one line scripts\n\nFor single line scripts, gRex allows you to directly pass an instance of `ObjectWrapper` to `client.execute()` (and `client.fetch()`). These methods will internally create a 'GremlinScript' which will be executed right away.\n\n```javascript\nclient.fetch(g.V(), function (e, vertices) { console.log(vertices) });\n```\n\nWhich is a shorthand for:\n```javascript\nclient.fetch(gremlin(g.V()), function (e, vertices) { console.log(vertices) });\n```\n\n#### Fetching\n\nGrex establishes a slight difference between executing and fetching.\n\nWhile `client.execute()` returns a raw Rexster response object, `client.fetch()` directly returns the `results` part of the response object, allowing you to directly manipulate objects in your scripts without having to call `response.results`.\n\n```javascript\nvar query = g.V('type', 'user');\nclient.fetch(query, function(err, results) {\n  if(err) {\n    console.error(err);\n  }\n  console.log(results);\n  var user = new UserModel(results[0]);\n});\n```\n\nWhen creating your client with `grex.createClient(options)`, it is also possible to define your own custom function in `options.fetched` in order to change the behavior of `client.fetch()`. This is useful if you wish to automatically instantiate returned graph Elements with custom classes of your own. The default handlers in gRex only returns the `results` part of the `response`, making `client.fetch()` a very close cousin of `client.execute()`.\n\n#### Executing a stored, server-side script\n\nPlease refer to Rexster documentation for help on [setting up server-side scripts](https://github.com/tinkerpop/rexster/wiki/Gremlin-Extension#load-parameter).\n\n```javascript\nvar client = grex.createClient({\n  load: ['vertices'] // Load vertices.gremlin, server-side\n});\n\n// Assumes vertices.gremlin contains an allVertices function\nclient.execute(gremlin('allVertices()'), function(err, results) {\n  should.not.exist(err);\n  should.exist(results);\n  done();\n});\n```\n\n### Accessing the internal GremlinScript instance of a query\n\nCalling `query()` returns the internal instance of `GremlinScript`:\n\n```javascript\nvar query = gremlin(g.V('name', 'marko').out());\n\nconsole.log(query().constructor.name); // GremlinScript\n// query().script === \"g.V('name','marko').out\"\n```\n\nCalling `query()` is especially useful if you wish to gain direct access to the lower level/private methods of the `GremlinScript` class. Unless debugging or trying to gain direct access to the raw script string, you shouldn't need to do this.\n\nThis allows you to directly set the `GremlinScript.script` property with an arbitrary string of Gremlin/Groovy (for example, the content of a `.groovy` file). You can also set the `GremlinScript.params` map and manually attach custom bound parameters to your script.\n\n\n## API differences between Gremlin Groovy and gRex JavaScript\n\nGrex tries to implement Gremlin (Groovy flavored) syntax as closely as possible. However, there are some notable differences.\n\nAll JavaScript method calls require parentheses __()__, even if there are no arguments. Using JavaScript getters could mimic the API The generated Groovy code will also use parentheses (see [Method Notation vs. Property Notation](https://github.com/tinkerpop/gremlin/wiki/Gremlin-Groovy-Path-Optimizations#method-notation-vs-property-notation)).\n\nHere are several examples which illustrate the differences between Gremlin Groovy and gRex JavaScript. Note that Groovy generated strings are displayed first in the following examples.\n\n### Support for multiple arguments or *Object* argument\n\n```groovy\n// Groovy\ng.V('name', 'marko').out\n```\n\n```javascript\n// JavaScript\ng.V('name', 'marko').out();\ng.V({ name: 'marko' }).out();\n```\n\n### Support for multiple arguments or *Array* argument\n```groovy\n// Groovy\ng.v(1, 4).out('knows', 'created').in\n```\n\n```javascript\n// JavaScript\ng.v(1, 4).out('knows', 'created').in();\ng.v([1, 4]).out(['knows', 'created']).in();\n```\n\n### Array indexes\n\n```groovy\n// Groovy\ng.V[0].name\n```\n\n```javascript\n// JavaScript\ng.V().index(0).property('name');\n```\n\n### Array ranges\n\n```groovy\n// Groovy\ng.V[0..<2].name\n```\n\n```javascript\n/// JavaScript\ng.V().range('0..<2').property('name');\n```\n\n### Comparison tokens\n\nYou may pass comparison tokens as strings or as appropriate JavaScript objects which grex directly exposes.\n\n```groovy\n// Groovy\ng.E.has('weight', T.gt, 0.5f).outV.transform{[it.id,it.age]}\n```\n\n```javascript\n// JavaScript\ng.E().has('weight', 'T.gt', '0.5f').outV().transform('{[it.id,it.age]}');\n\n// alternatively\nvar T = grex.T;\ng.E().has('weight', T.gt, '0.5f').outV().transform('{[it.id,it.age]}');\n```\n\n### Passing of pipelines\n\nMake sure you declare the following on top of your script:\n\n```javascript\nvar _ = grex._;\n// Beware of conflicts and make sure you don't override Underscore.js or Lodash.js\n```\nThis allows you to call the `_()` function directly, leaving no differences with a Groovy environment:\n```groovy\n// Groovy\ng.V.and(_().both(\"knows\"), _().both(\"created\"))\n```\n\n```javascript\n// JavaScript\ng.V().and(_().both(\"knows\"), _().both(\"created\"))\n```\n\n```groovy\n// Groovy\ng.v(1).outE.or(_().has('id', T.eq, \"9\"), _().has('weight', T.lt, 0.6f))\n```\n\n```javascript\n// JavaScript\ng.v(1).outE().or(_().has('id', 'T.eq', 9), _().has('weight', 'T.lt', '0.6f'));\n```\n\n```groovy\n// Groovy\ng.V.retain([g.v(1), g.v(2), g.v(3)])\n```\n\n```javascript\n// JavaScript\ng.V().retain([g.v(1), g.v(2), g.v(3)])\n```\n\n### Closures\n\nClosures currently need to be passed in as a string argument to methods. Though not trivial to implement, this will likely change in the future ([see issue#22](https://github.com/gulthor/grex/issues/22)). It could also be supported with a different API or maybe using ES6 Proxies. Suggestions welcomed!\n\n```groovy\n// Groovy\ng.v(1).out.gather{it.size()}\n\ng.v(1).out.ifThenElse{it.name=='josh'}{it.age}{it.name}\n\ng.V.out.groupBy{it.name}{it.in}{it.unique().findAll{i -> i.age > 30}.name}.cap\n```\n\n```javascript\n// JavaScript\ng.v(1).out().gather(\"{it.size()}\");\n\ng.v(1).out().ifThenElse(\"{it.name=='josh'}{it.age}{it.name}\");\n\ng.V().out().groupBy('{it.name}{it.in}{it.unique().findAll{i -> i.age > 30}.name}').cap()\n```\n\n### Java classes\n\nJava classes are currently passed in either as strings or as JavaScript objects.\n```groovy\n// Groovy\ng.createIndex(\"my-index\", Vertex.class)\n```\n\n```javascript\n// JavaScript\ng.createIndex(\"my-index\", \"Vertex.class\");\n\n// alternatively\nvar Vertex = grex.Vertex;\ng.createIndex(\"my-index\", Vertex);\n```\n\nPassing classes as strings might be deprecated in future versions.\n\n### Retrieving indexed Elements\n\n```groovy\n// Groovy\ng.idx(\"my-index\")[[name:\"marko\"]]\n```\n\n```javascript\n// JavaScript\ng.idx(\"my-index\", {name:\"marko\"});\n```\n\nThis may change once ES6 Proxies are out.\n\n### Other notable differences\n\n* __Comparators__ and __Float__'s are not native javascript Types so they currently need to be passed in as a string to Grex methods. Floats need to be suffixed with a 'f'. This will probably change in future versions of Grex.\n\n    ```javascript\n    g.v(1).outE().has(\"weight\", \"T.gte\", \"0.5f\").property(\"weight\")\n    ```\n* Certain methods cannot (yet) be easily implemented. Such as `aggregate`, `store`, `table`, `tree` and `fill`. These methods require a local object to populate with data, which cannot be easily done in this environment. You may however directly pass an arbitrary string to `query()` to bypass this limitation.\n* Tokens/Classes: You will notice that in the examples tokens are passed as string (i.e. 'T.gt'). However, Grex also exposes some objects for convenience that you can use in place of string representations in your queries. To access the objects, reference them like so:\n\n  ```javascript\n    var T = grex.T;\n    var Contains = grex.Contains;\n    var Vertex = grex.Vertex;\n    var Edge = grex.Edge;\n    // etc.\n    // Most tokens/classes are exposed. Feel free to open an issue if some are missing.\n  ```\n\n## API documentation\n\n### Grex\n\nWhen starting with gRex and/or Gremlin, it is recommended that you use the proxied getters/wrappers.\n\n#### grex.createClient()\n\nInstantiate a Rexster client.\n\nOptions:\n* `host` - default: localhost\n* `port` - default: 8182\n* `graph` - default: tinkergraph\n* `load` - an Array of server-side scripts to load\n* `showTypes` - whether results should be returned with types (default: false)\n* `fetched` - a function to apply, modifying the behavior of `client.fetch`\n\n#### grex.gremlin\n\nA getter returning a function.\n\nDoing `grex.gremlin` will instantiate a new `GremlinScript` instance and return a function responsible for appending bits of Gremlin-Groovy scripts to the instance.\n\nA getter which returns a function responsible for creating a new `GremlinScript` instance.\n\n```javascript\nvar grex = require('grex');\nvar g = grex.g;\nvar gremlin = grex.gremlin;\n\n// Create two distinct GremlinScript instances\nvar queryA = gremlin();\nvar queryB = gremlin();\n\nqueryA(g.addVertex());\nqueryB(g.v(40));\nqueryA(g.v(1));\n\n// queryA.script === 'g.addVertex()\\ng.v(1)\\n'\n// queryB.script === 'g.v(40)\\n'\n```\n\n#### grex.g\n\nA getter returning a `new Graph()` wrapper instance.\n\nGraph methods return convenient wrapper objects, which is either:\n* a new `PipelineWrapper` instance which you get when calling `g.v()`, `g.V()`, `g.E()`, etc.)\n* a new `VertexWrapper` via `g.addVertex()` or new `EdgeWrapper` instance via `g.addEdge()`. Note that both classes inherits from `ElementWrapper`. They all inherits from `ObjectWrapper`.\n\n#### grex._\n\nA getter returning a `new Pipeline()` wrapper instance.\n\n\n### Client\n\n#### client.execute(gremlinScript, callback)\n\nSends the generated `GremlinScript` to the server for execution.\n\nThe callback takes an `err` object and a raw Rexster `response` object as arguments.\n\n#### client.fetch(gremlinScript, callback)\n\nSends the generated `GremlinScript` to the server for execution.\n\nThe callback takes an `err` object, a `results` object (as a shortcut for `response.results`) and a `response` object.\n\n\n## Todo\n\n* bound arguments on helpers/wrappers (for security and better performance on the server)\n* closure as JavaScript functions\n* simplified API (~~remove gremlin.g and gremlin._, remove Java .class~~, etc.)\n* Rexpro?\n* performance checks and improvements\n\n\n## Author\n\nJean-Baptiste Musso - [@jbmusso](https://twitter.com/jbmusso).\n\nBased on the work started by Frank Panetta - [@entrendipity](https://twitter.com/entrendipity).\n\n\n## Contributors\n\nhttps://github.com/gulthor/grex/graphs/contributors\n\n## License\n\nMIT (c) 2013-2014 Jean-Baptiste Musso, Entrendipity Pty Ltd.\n",
  "readmeFilename": "README.md",
  "_id": "grex@0.7.2",
  "dist": {
    "shasum": "1b3c753f725454e27102036faf9f6565471173f2"
  },
  "_from": "grex@",
  "_resolved": "https://registry.npmjs.org/grex/-/grex-0.7.2.tgz"
}
